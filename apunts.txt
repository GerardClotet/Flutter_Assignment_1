SETUP
variables entorno PATH 
C:\flutter\bin\cache\dart-sdk\bin
C:\flutter\bin

SHORCUTS

ctrl + alt + d -> devtools

alt + shit + f -> text format

ctrl + space -> vars and children

ctrl + . -> add widget

ctr + shift + p -> comands
FLUTTER CMD

flutter emulators --launch emulator_id

flutter create (name)

code . ->open in code folder


DART

declarar var en els constructors 
class Muestra extends StatelessWidget {
  final Widget child;
  final String text;
  const Muestra({
    Key key,
    @required this.child,
    @required this.text,
  }) : super(key: key);

@required, necesari omplir


exemple classe apart
class Trip {
  String loc_name, description, descAsset, profile_pic, big_pic;
  int cost;
  Trip({
    this.loc_name,
    this.description,
    this.descAsset,
    this.profile_pic,
    this.big_pic,
    this.cost,
  });
}

final santorini = Trip(
  loc_name: 'Santorini',
  cost: 1450,
  description: 'Things to do in Santorini Greece. Discover the most Romantinc Holiday destination in Greece.',
  profile_pic: 'assets/profile_pic.png',
  big_pic: 'assets/background.jpg',
  descAsset: 'assets/desc_asset.jpg',
);


Despres aquesta funcio es crida tipo

lass Top extends StatelessWidget {
  final Trip trip;
  Top(this.trip);

llavors dintre de la classe ja es fa servir la variable this.trip










STATEFUL
//stateful no es estatico permite canviar mientras runApp esta activo

classe state derivada de statefultwidget
// classe asociada al estado del stateful widget
initState() // a la classe asociada inicialitza el estat


El SetState s'ha de posar al widget build, dintre del alguna funcio tipo onPressed() / onTap() (aquesta es del GestureDectector


Es pot posar com a home la classe stateful
es pot agafar el style definit al materialApp node pare
e.g dintre dun Text  style: Theme.of(context).textTheme.display4,


INCISO EN COM PASAR COSES
crear variable al State
ferli el seu init al InitState // previ al widget build(BuildContext
//---------------------------//
GRID
e.g home Scaffold -> body: GridView.count( // et fa grid automaticament del que sigui
metodes crossAxisCount: num per fila
childAspectRatio : tamany
 i children[] de widgets
//-----------------------------//
REBRE TEXT DESDE UN TECLAT
TextField Widget pare 
metode
controller: TextEditingController controla el text pilla input igualem la variable creada 
onSubmited : retorna una funcio String amb el text 

Pots  pasarli una funcio de tipus future amb el build context tipo context: context, builder: (context) => widget
O guardarte directament la variable string i treurela per un altre lloc.
//---------------------------------------//
EXPANDED
Posar com a fills duna row / columns que contenen un widget dintre , metode flex es controla el ratio

//------------------------------//
BUTTONS
Widget tipos card (un estil nice) ->child: tipos de boto,

RaisedButton
IconButton
OutlineButtonBackButton
FloatingButtong etc
FlatButton
metodes guays:
onPressed(); // sino te aquesta funcio es un boto que logica i visualment no es pot pulsar per aqui es retorna la info
shape: (stadiumborder nice)
label:
highlightcolor:
tooltip:

//-------------------------------------------------//

PASSAR ENTRE PAGINES

posar un botto
func -> on pressed(){
Navigator.of(context).pop(//es pot passar valors a dintre) ->retorna enrere en l'arbre de widgets
Navigator.of(context).push / 

Si s'inialitza amb strings
routes:
{

pushNamed( '/page1' : (context) => Class
pushNamed( '/page2' : (context) => Class
}

S'ha de fer push desde la primera a la segona pagina ex Navigator.of(context).pushNamed('/page2',... (si es vol))

Els pops i push poden retorna futuribles com ...pushNamed(...,...,arguments: (valor a passar a la seguent pagina)).then((result){  _valor = result}) //NOMES AL PUSH


El pop fa callback del futurible enviat al principi pel then i retorna el result
tmbe es pot buildejar directament la seguen pagina 


 Navigator.of(context)
                    .push(MaterialPageRoute(
                  builder: (context) => EditScreen(_texto),
                ))
                    .then((result) {

Al widget State posar un initState o un didChangeDependencies
per agafar-ho a dintre de la funcio
final Color color = ModalRoute.of(context).settings.arguments; et torna els arguments passats al push



NEw WAY

 floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () {
          Navigator.of(context)
              .push(
            MaterialPageRoute(
              builder: (_) => NewTodoPage(),
            ),
          )
              .then((what) {
            setState(() {
              _todos.add(Todo(what));
            });
          });
        },
      ),

//----------------------------------------//
ALERT DIALOG

Func -> ShowDialog()
agafar el buildcontext amb metode context

barrierDismissible:false -> no surt si cliques for
buildejar alert title: (context) =>Alertdialog( // com si fos un container 

//-----------------------//
USER LIST

home scaffold -> body Func
Utilitzar stateful
List<class> list;
Fer.ho be! Ferse una llista de una classe que contingui que el vulguem, 
fer el initState inicialitzant cada valor de la llista

El widget retorna ListView.builder
metode itemBuilder: (context, index)
metode retorna ListTile(
se li passen parametres eg title: Text(list[index].classVar,

metode itemCount: list.lenth -> per generar la llista amb la lenght justa


//--------------------------------------------//
FUTURE
 Funcio Future<String> FuncioTal() async{ return "hola";}

la crides -> FuncioTal.then((var){  //var es el return de la funcio
print (var) //Seria un string var
});

el then assegura que esta completed, llavors es crida lo de dins de la funcio.

Llegir fitxer amb future:
File file = File('fitxer.dart');
file.readAsString().then((content){});

AWAIT FUTURE
Future<String> nombreFichero() async {return "await.dart";}

Future<void> muestraFichero() async { //funcion async, acabara cuando lo tenga que hacer
  String filename = await nombreFichero(); //await solo puede estar en funciones async
  String content = await File(filename).readAsStringSync();
  print(content);}

main() { muestraFichero(); print("fin");}

FUTURE BUILDER

class App extends StatelessWidget {

Future<String> _cargaDatos() async{
  await Future.delayed(Duration(seconds: 5));
  return await rootBundle.loadString('assets/datos.txt');
}

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
          appBar: AppBar(title: Text('Future Builder')),
          body: FutureBuilder(
            future: _cargaDatos(),
            builder: (context, AsyncSnapshot<String> snapshot) {
              if (snapshot.hasError) {
                return Center(
                    child: Text('ERROR: ${snapshot.error.toString()}'));
              }
              if (!snapshot.hasData) {
                //
                return Center(child: CircularProgressIndicator());
              }
              return Center(child: Text(snapshot.data));
            },
          )),
    );
  }
}

//-------------------------------------------//
JSON (es necessita el path_provider)

LLegir

class _LocationsListState extends State<LocationsList> {
  bool loading;
  List<Apartment> apartments;
  @override
  void initState() {
    apartments = [];
    loading = true;
    _loadApartments();
    super.initState();
  }

  void _loadApartments() async {
    WidgetsFlutterBinding.ensureInitialized();
    String jsonStr = await rootBundle.loadString('assets/apartments.json');

    Map<String, dynamic> json = jsonDecode(jsonStr);
    List<Apartment> _apart = [];
    for (var json_apartment in json['houses']) {
      _apart.add(Apartment.fromjson(json_apartment));
    }
    setState(() {
      apartments = _apart;
      loading = false;
    });
  }


//--------
  Apartment.fromjson(Map<String, dynamic> json)
      : username = json['user'],
        loc_name = json['loc_name'],
        description = json['description'],
        profile_pic = json['profile_pic'],
        big_pic = json['big_pic'],
        desc_asset = json['descAsset'],
        s_cost = json['cost'], //passar a int

        d = json['cost'];


}

//-----
EX class Todo {
  String what;
  bool done;
  Todo(this.what) : done = false;

  Todo.fromJson(Map<String, dynamic> json)
      : what = json['what'],
        done = json['done'];

  Map<String, dynamic> toJson() => {
        'what': what,
        'done': done,
      };
}

class TodoListPage extends StatefulWidget {
  @override
  _TodoListPageState createState() => _TodoListPageState();
}



class _TodoListPageState extends State<TodoListPage> {
  List<Todo> _todos; // Model

  @override
  void initState() {
    _loadTodos();
    super.initState();
  }

  Future<void> _loadTodos() async {
    await Future.delayed(Duration(seconds: 5));
    try {
      Directory dir = await getApplicationDocumentsDirectory();
      File file = File('${dir.path}/todo.json');
      String fileContents = await file.readAsString();
      List json = jsonDecode(fileContents);
      List<Todo> loaded = [];
      for (var elem in json) {
        loaded.add(Todo.fromJson(elem));
      }
      super.setState(() => _todos = loaded);
    } catch (e) {
      print("ERROR: No he pogut llegir els todos!");
      super.setState(() => _todos = []);
    }
  }

  Future<void> _writeTodos() async {
    Directory dir = await getApplicationDocumentsDirectory();
    File file = File('${dir.path}/todo.json');
    var json = jsonEncode(_todos);
     print(json);
    await file.writeAsString(json);
  }

  @override
  void setState(fn) {
    super.setState(fn);
    _writeTodos();
  }

//---------------------------------------------------------------------------------//


STREAMS
Stream<int> countdown(int from, int to) async* {
  yield from;
  for (int i = from-1; i >= to; i--) {
    await Future.delayed(Duration(seconds: 1));
    yield i; // devuelve un valor en el strem y sigue ejecutando estya funcion
  }
}

main() {
 print('inici');

  countdown(10, 0).listen((value) { 
    // el listen entra cada vez que devuelve algo, el then cuando acaba la funcion
    print(value);
  });

STREAM BUILDER
class App extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('streambuilder')),
        body: StreamBuilder(
          stream: countdown(10, 0),
          builder: (context, AsyncSnapshot<int> snpashot) {
            if (snpashot.hasError) {
              return Center(child: Text('Error: ${snpashot.error.toString()}'));
            }
            switch (snpashot.connectionState) {
              case ConnectionState.none:
                return Center(child: Text('none'));
                break;
              case ConnectionState.waiting:
                return Center(child: CircularProgressIndicator());
                break;
              case ConnectionState.active:
                return Center(
                    child: Text(
                  '${snpashot.data}',
                  style: TextStyle(fontSize: 60),
                ));
                break;
              case ConnectionState.done:
                return Center(child: Text('done'));
                break;
            }

            return null; // tema del llenguatge que et demana retornar algo si o si
          },
        ),
      ),
    );
  }
}


//---------------------------------//
FIREBASE

package cloudfirestore

 body: StreamBuilder(
        stream: Firestore.instance.collection('groups').snapshots(), // groups es el nom del document
        builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (!snapshot.hasData) {
            return Center(child: CircularProgressIndicator());
          }

          List<DocumentSnapshot> docs = snapshot.data.documents;
          return ListView.builder(
            itemCount: docs.length,
            itemBuilder: (context, index) {
              return ListTile(
                title: Text(docs[index].data['name']), //name es el nom del campo
              );
            },
          );
        },
      ),


//TEXT CONTROLER

  TextEditingController _controller;

  @override
  void initState() {
    _controller = TextEditingController();
    super.initState();
  }

.
.
.
 TextField(
              controller: _controller,
              onSubmitted: (text) {
                Navigator.of(context).pop(text);
              },
            ),

o

 RaisedButton(
              child: Icon(Icons.save),
              onPressed: () {
                Navigator.of(context).pop(_controller.text);
              },
            ),



